package packagename;

import java.lang.reflect.*;

public class Main {
    public static void main(String[] args) throws IllegalArgumentException,SecurityException,NoSuchMethodException,ClassNotFoundException,IllegalAccessException,InstantiationException,InvocationTargetException,NoSuchFieldException{
        Demo1();
        Demo2();
        Demo3();
    /*    Demo4();
        Demo5();
        Demo6();
        Demo7();*/
    }

    /**
     * 类加载的两种方法
     * @throws ClassNotFoundException
     */
    public static void Demo1() throws ClassNotFoundException{
        Person pserson = new Person();
        Class class1 = Class.forName("packagename.Person");
        Class class2 = Person.class;
        System.out.println("Demo1:(写法1) 包名: " + class1.getPackage().getName() + "，"
                + "完整类名: " + class1.getName()+"Demo1:(写法1) 包名: " + class2.getPackage().getName() + "，"
                + "完整类名: " + class2.getName());
    }

    /**
     * 放射加载后  对象的使用
     * @throws ClassNotFoundException
     * @throws IllegalAccessException
     * @throws InstantiationException
     */
    public static void Demo2() throws ClassNotFoundException,IllegalAccessException,InstantiationException{
        Class class1 = Class.forName("packagename.Person");
        Person person = (Person)class1.newInstance();
        person.setName("name");
        System.out.println(person.getName());
    }

    /**
     * 获取构造器 加载类对象
     * @throws ClassNotFoundException
     * @throws IllegalAccessException
     * @throws InstantiationException
     * @throws InvocationTargetException
     */
    public static void Demo3() throws ClassNotFoundException,IllegalAccessException,InstantiationException,InvocationTargetException{
        Class class1 = Class.forName("packagename.Person");
        Constructor<?>[] constructors = class1.getConstructors();
        Person person1 = (Person) constructors[0].newInstance();

        person1.setName("person1");
        Person person2 = (Person) constructors[1].newInstance("person2");

        Person person = (Person)class1.newInstance();
        person.setName("person");
        System.out.println(person.getName());
    }

    /**
     * 通过Java反射机制操作成员变量
     * @throws ClassNotFoundException
     * @throws IllegalAccessException
     * @throws InstantiationException
     * @throws InvocationTargetException
     * @throws NoSuchFieldException
     */
    public static void Demo4() throws ClassNotFoundException,IllegalAccessException,InstantiationException,InvocationTargetException,NoSuchFieldException{
        Class class1 = Class.forName("packagename.Person");
        Person person = (Person) class1.newInstance();
        Field field = class1.getDeclaredField("name");
        field.set(person,"Frank");
        Person person1 = new Person();
        person1.setName("Person");
        System.out.println(person.getName());
        System.out.println(person1.getName());

    }

    /**
     * Demo5: 通过Java反射机制得到类的一些属性： 继承的接口，父类，函数信息，成员信息，类型等
     * @throws ClassNotFoundException
     */
    public static void Demo5() throws ClassNotFoundException
    {
        Class<?> class1 = null;
        class1 = Class.forName("packagename.Person");
        //取得父类名称
        Class<?>  superClass = class1.getSuperclass();
        System.out.println("Demo5:  SuperMan类的父类名: " + superClass.getName());
        System.out.println("===============================================");
        Field[] fields = class1.getDeclaredFields();
        for (int i = 0; i < fields.length; i++) {
            System.out.println("类中的成员: " + fields[i]);
        }
        System.out.println("===============================================");


        //取得类方法
        Method[] methods = class1.getDeclaredMethods();
        for (int i = 0; i < methods.length; i++) {
            System.out.println("Demo5,取得SuperMan类的方法：");
            System.out.println("函数名：" + methods[i].getName());
            System.out.println("函数返回类型：" + methods[i].getReturnType());
            System.out.println("函数访问修饰符：" + Modifier.toString(methods[i].getModifiers()));
            System.out.println("函数代码写法： " + methods[i]);
        }

        System.out.println("===============================================");

        //取得类实现的接口,因为接口类也属于Class,所以得到接口中的方法也是一样的方法得到哈
        Class<?> interfaces[] = class1.getInterfaces();
        for (int i = 0; i < interfaces.length; i++) {
            System.out.println("实现的接口类名: " + interfaces[i].getName() );
        }

    }
    /**
     * Demo6: 通过Java反射机制调用类方法
     * @throws ClassNotFoundException
     * @throws NoSuchMethodException
     * @throws SecurityException
     * @throws InvocationTargetException
     * @throws IllegalAccessException
     * @throws IllegalArgumentException
     * @throws InstantiationException
     */
    public static void Demo6() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException, InstantiationException
    {
        Class<?> class1 = null;
        class1 = Class.forName("packagename.Person");

        System.out.println("Demo7: \n调用无参方法Speak()：");
        Method method = class1.getMethod("Speak");
        method.invoke(class1.newInstance());

        System.out.println("调用有参方法walk(int m)：");
        method = class1.getMethod("walk",int.class);
        method.invoke(class1.newInstance(),100);
    }
    /**
     * Demo7: 通过Java反射机制得到类加载器信息
     *
     * 在java中有三种类类加载器。[这段资料网上截取]

     1）Bootstrap ClassLoader 此加载器采用c++编写，一般开发中很少见。

     2）Extension ClassLoader 用来进行扩展类的加载，一般对应的是jre\lib\ext目录中的类

     3）AppClassLoader 加载classpath指定的类，是最常用的加载器。同时也是java中默认的加载器。
     *
     * @throws ClassNotFoundException
     */
    public static void Demo7() throws ClassNotFoundException
    {
        Class<?> class1 = null;
        class1 = Class.forName("packagename.Person");
        String nameString = class1.getClassLoader().getClass().getName();

        System.out.println("Demo8: 类加载器类名: " + nameString);
    }


}
class PersonParent{
    public void Speak(){
        System.out.print("I am human");
    }
}

interface Human {
    public  void work();
}

class Person extends PersonParent implements  Human{
    public Person(){
    }
    public Person(String name){
        this.name = name;
    }
    String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void walk(int a){
        System.out.println("走"+a+"步");
    }

    @Override
    public void work() {
        System.out.println("i can work");
    }
}
